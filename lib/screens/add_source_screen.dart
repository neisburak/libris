import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/source.dart' as models;
import '../providers/source_provider.dart';

class AddSourceScreen extends ConsumerStatefulWidget {
  const AddSourceScreen({super.key});

  @override
  ConsumerState<AddSourceScreen> createState() => _AddSourceScreenState();
}

class _AddSourceScreenState extends ConsumerState<AddSourceScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _authorController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _urlController = TextEditingController();
  final _totalPagesController = TextEditingController();
  final _durationController = TextEditingController();

  models.SourceType _selectedType = models.SourceType.book;
  double? _rating;

  @override
  void dispose() {
    _titleController.dispose();
    _authorController.dispose();
    _descriptionController.dispose();
    _urlController.dispose();
    _totalPagesController.dispose();
    _durationController.dispose();
    super.dispose();
  }

  Future<void> _saveSource() async {
    if (!_formKey.currentState!.validate()) return;

    final source = models.Source(
      id: '', // Will be generated by Firestore
      title: _titleController.text.trim(),
      author: _authorController.text.trim(),
      type: _selectedType,
      description: _descriptionController.text.trim().isEmpty 
          ? null 
          : _descriptionController.text.trim(),
      url: _urlController.text.trim().isEmpty 
          ? null 
          : _urlController.text.trim(),
      totalPages: _totalPagesController.text.isEmpty 
          ? null 
          : int.tryParse(_totalPagesController.text),
      duration: _durationController.text.trim().isEmpty 
          ? null 
          : _durationController.text.trim(),
      rating: _rating,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    try {
      await ref.read(sourceProvider.notifier).addSource(source);
      if (mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Source added successfully!')),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding source: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Source'),
        actions: [
          TextButton(
            onPressed: _saveSource,
            child: const Text('Save'),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            // Source Type Selection
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Source Type',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    Wrap(
                      spacing: 8,
                      children: models.SourceType.values.map((type) {
                        return FilterChip(
                          label: Text('${_getTypeIcon(type)} ${_getTypeName(type)}'),
                          selected: _selectedType == type,
                          onSelected: (selected) {
                            setState(() {
                              _selectedType = type;
                            });
                          },
                        );
                      }).toList(),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // Title
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(
                labelText: 'Title *',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter a title';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // Author
            TextFormField(
              controller: _authorController,
              decoration: const InputDecoration(
                labelText: 'Author/Creator *',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter an author/creator';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // Description
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(
                labelText: 'Description',
                border: OutlineInputBorder(),
              ),
              maxLines: 3,
            ),
            const SizedBox(height: 16),

            // URL (for videos, articles, websites, podcasts)
            if (_selectedType != models.SourceType.book)
              Column(
                children: [
                  TextFormField(
                    controller: _urlController,
                    decoration: const InputDecoration(
                      labelText: 'URL',
                      border: OutlineInputBorder(),
                      hintText: 'https://...',
                    ),
                    keyboardType: TextInputType.url,
                  ),
                  const SizedBox(height: 16),
                ],
              ),

            // Total Pages (for books, articles)
            if (_selectedType == models.SourceType.book || _selectedType == models.SourceType.article)
              Column(
                children: [
                  TextFormField(
                    controller: _totalPagesController,
                    decoration: const InputDecoration(
                      labelText: 'Total Pages',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                  const SizedBox(height: 16),
                ],
              ),

            // Duration (for videos, podcasts)
            if (_selectedType == models.SourceType.video || _selectedType == models.SourceType.podcast)
              Column(
                children: [
                  TextFormField(
                    controller: _durationController,
                    decoration: const InputDecoration(
                      labelText: 'Duration',
                      border: OutlineInputBorder(),
                      hintText: 'e.g., 1:23:45 or 45 minutes',
                    ),
                  ),
                  const SizedBox(height: 16),
                ],
              ),

            // Rating
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Rating',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: List.generate(5, (index) {
                        return IconButton(
                          icon: Icon(
                            index < (_rating ?? 0) ? Icons.star : Icons.star_border,
                            color: Colors.amber,
                          ),
                          onPressed: () {
                            setState(() {
                              _rating = (index + 1).toDouble();
                            });
                          },
                        );
                      }),
                    ),
                    if (_rating != null)
                      TextButton(
                        onPressed: () {
                          setState(() {
                            _rating = null;
                          });
                        },
                        child: const Text('Clear Rating'),
                      ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _getTypeIcon(models.SourceType type) {
    switch (type) {
      case models.SourceType.book:
        return '📖';
      case models.SourceType.video:
        return '🎥';
      case models.SourceType.article:
        return '📄';
      case models.SourceType.podcast:
        return '🎧';
      case models.SourceType.website:
        return '🌐';
      case models.SourceType.other:
        return '📝';
    }
  }

  String _getTypeName(models.SourceType type) {
    switch (type) {
      case models.SourceType.book:
        return 'Book';
      case models.SourceType.video:
        return 'Video';
      case models.SourceType.article:
        return 'Article';
      case models.SourceType.podcast:
        return 'Podcast';
      case models.SourceType.website:
        return 'Website';
      case models.SourceType.other:
        return 'Other';
    }
  }
}
